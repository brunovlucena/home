# Minimal Infrastructure for Notifi Test Environment
# This file provides mock services to test all Linkerd policy scenarios
# covering all unique port and protocol combinations without duplication.

---
# Mock Service for HTTP/1 on port 80 (external HTTP services)
apiVersion: v1
kind: Service
metadata:
  name: mock-http-80
  namespace: notifi-test
  labels:
    app.kubernetes.io/name: mock-http-80
    app.kubernetes.io/component: gateway
spec:
  selector:
    app.kubernetes.io/name: mock-http-80
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP

---
# Mock Service for gRPC/HTTP2 on port 4000 (gRPC services)
apiVersion: v1
kind: Service
metadata:
  name: mock-grpc-4000
  namespace: notifi-test
  labels:
    app.kubernetes.io/name: mock-grpc-4000
    app.kubernetes.io/component: manager
spec:
  selector:
    app.kubernetes.io/name: mock-grpc-4000
  ports:
  - port: 4000
    targetPort: 4000
    protocol: TCP

---
# Mock Service for WebSocket on port 8080 (WebSocket services)
apiVersion: v1
kind: Service
metadata:
  name: mock-websocket-8080
  namespace: notifi-test
  labels:
    app.kubernetes.io/name: mock-websocket-8080
    app.kubernetes.io/component: websocket
spec:
  selector:
    app.kubernetes.io/name: mock-websocket-8080
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP

---
# Mock Service for HTTP/1 on port 5000 (internal HTTP services)
apiVersion: v1
kind: Service
metadata:
  name: mock-http-5000
  namespace: notifi-test
  labels:
    app.kubernetes.io/name: mock-http-5000
    app.kubernetes.io/component: messenger
spec:
  selector:
    app.kubernetes.io/name: mock-http-5000
  ports:
  - port: 5000
    targetPort: 5000
    protocol: TCP

---
# Mock Service for Health Check on port 6000
apiVersion: v1
kind: Service
metadata:
  name: mock-health-6000
  namespace: notifi-test
  labels:
    app.kubernetes.io/name: mock-health-6000
    app.kubernetes.io/component: health
spec:
  selector:
    app.kubernetes.io/name: mock-health-6000
  ports:
  - port: 6000
    targetPort: 6000
    protocol: TCP

---
# Mock Service for Metrics on port 7000
apiVersion: v1
kind: Service
metadata:
  name: mock-metrics-7000
  namespace: notifi-test
  labels:
    app.kubernetes.io/name: mock-metrics-7000
    app.kubernetes.io/component: metrics
spec:
  selector:
    app.kubernetes.io/name: mock-metrics-7000
  ports:
  - port: 7000
    targetPort: 7000
    protocol: TCP

---
# Mock Service for Redis on port 6379 (cache)
apiVersion: v1
kind: Service
metadata:
  name: mock-redis-6379
  namespace: notifi-test
  labels:
    app.kubernetes.io/name: mock-redis-6379
    app.kubernetes.io/component: cache
spec:
  selector:
    app.kubernetes.io/name: mock-redis-6379
  ports:
  - port: 6379
    targetPort: 6379
    protocol: TCP

---
# Mock Service for RabbitMQ on port 5672 (queue)
apiVersion: v1
kind: Service
metadata:
  name: mock-rabbitmq-5672
  namespace: notifi-test
  labels:
    app.kubernetes.io/name: mock-rabbitmq-5672
    app.kubernetes.io/component: queue
spec:
  selector:
    app.kubernetes.io/name: mock-rabbitmq-5672
  ports:
  - port: 5672
    targetPort: 5672
    protocol: TCP

---
# Mock Deployments for all services
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mock-http-80
  namespace: notifi-test
  labels:
    app.kubernetes.io/name: mock-http-80
    app.kubernetes.io/component: gateway
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mock-http-80
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mock-http-80
        app.kubernetes.io/component: gateway
    spec:
      containers:
      - name: mock-server
        image: nginx:alpine
        ports:
        - containerPort: 80
        command: ["/bin/sh"]
        args: 
        - -c
        - |
          echo 'server {
              listen 80;
              location / {
                  return 200 "Mock HTTP Service on port 80 (External)\n";
                  add_header Content-Type text/plain;
              }
          }' > /etc/nginx/conf.d/default.conf &&
          nginx -g "daemon off;"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mock-grpc-4000
  namespace: notifi-test
  labels:
    app.kubernetes.io/name: mock-grpc-4000
    app.kubernetes.io/component: manager
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mock-grpc-4000
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mock-grpc-4000
        app.kubernetes.io/component: manager
    spec:
      containers:
      - name: mock-server
        image: moul/grpcbin:latest
        ports:
        - containerPort: 4000
        env:
        - name: GRPC_PORT
          value: "4000"
        command: ["/bin/sh"]
        args:
        - -c
        - |
          # Start gRPC server on port 4000
          grpcbin --insecure-addr :4000

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mock-websocket-8080
  namespace: notifi-test
  labels:
    app.kubernetes.io/name: mock-websocket-8080
    app.kubernetes.io/component: websocket
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mock-websocket-8080
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mock-websocket-8080
        app.kubernetes.io/component: websocket
    spec:
      containers:
      - name: websocket-server
        image: node:18-alpine
        ports:
        - containerPort: 8080
        command: ["/bin/sh"]
        args:
        - -c
        - |
          # Create app directory and install ws package
          mkdir -p /app
          cd /app
          npm init -y
          npm install ws
          
          # Create WebSocket server
          cat > /app/websocket-server.js << 'EOF'
          const WebSocket = require('ws');
          const http = require('http');
          
          const server = http.createServer();
          const wss = new WebSocket.Server({ server });
          
          wss.on('connection', function connection(ws, req) {
            console.log('WebSocket client connected from:', req.socket.remoteAddress);
            
            // Send welcome message
            ws.send(JSON.stringify({
              type: 'welcome',
              message: 'Connected to WebSocket server!',
              timestamp: new Date().toISOString()
            }));
            
            // Handle incoming messages
            ws.on('message', function incoming(message) {
              console.log('Received:', message.toString());
              
              // Echo the message back
              ws.send(JSON.stringify({
                type: 'echo',
                original: message.toString(),
                timestamp: new Date().toISOString()
              }));
            });
            
            // Handle ping/pong
            ws.on('ping', function() {
              console.log('Received ping');
              ws.pong();
            });
            
            // Handle close
            ws.on('close', function() {
              console.log('WebSocket client disconnected');
            });
            
            // Send periodic heartbeat
            const heartbeat = setInterval(() => {
              if (ws.readyState === WebSocket.OPEN) {
                ws.send(JSON.stringify({
                  type: 'heartbeat',
                  timestamp: new Date().toISOString()
                }));
              } else {
                clearInterval(heartbeat);
              }
            }, 30000);
          });
          
          server.listen(8080, '0.0.0.0', () => {
            console.log('WebSocket server running on port 8080');
          });
          EOF
          
          # Start the WebSocket server
          node /app/websocket-server.js

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mock-http-5000
  namespace: notifi-test
  labels:
    app.kubernetes.io/name: mock-http-5000
    app.kubernetes.io/component: messenger
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mock-http-5000
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mock-http-5000
        app.kubernetes.io/component: messenger
    spec:
      containers:
      - name: mock-server
        image: nginx:alpine
        ports:
        - containerPort: 5000
        command: ["/bin/sh"]
        args: 
        - -c
        - |
          echo 'server {
              listen 5000;
              location / {
                  return 200 "Mock HTTP Service on port 5000 (Internal)\n";
                  add_header Content-Type text/plain;
              }
          }' > /etc/nginx/conf.d/default.conf &&
          nginx -g "daemon off;"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mock-health-6000
  namespace: notifi-test
  labels:
    app.kubernetes.io/name: mock-health-6000
    app.kubernetes.io/component: health
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mock-health-6000
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mock-health-6000
        app.kubernetes.io/component: health
    spec:
      containers:
      - name: mock-server
        image: nginx:alpine
        ports:
        - containerPort: 6000
        command: ["/bin/sh"]
        args: 
        - -c
        - |
          echo 'server {
              listen 6000;
              location / {
                  return 200 "Mock Health Check Service on port 6000\n";
                  add_header Content-Type text/plain;
              }
          }' > /etc/nginx/conf.d/default.conf &&
          nginx -g "daemon off;"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mock-metrics-7000
  namespace: notifi-test
  labels:
    app.kubernetes.io/name: mock-metrics-7000
    app.kubernetes.io/component: metrics
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mock-metrics-7000
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mock-metrics-7000
        app.kubernetes.io/component: metrics
    spec:
      containers:
      - name: mock-server
        image: nginx:alpine
        ports:
        - containerPort: 7000
        command: ["/bin/sh"]
        args: 
        - -c
        - |
          echo 'server {
              listen 7000;
              location / {
                  return 200 "Mock Metrics Service on port 7000\n";
                  add_header Content-Type text/plain;
              }
          }' > /etc/nginx/conf.d/default.conf &&
          nginx -g "daemon off;"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mock-redis-6379
  namespace: notifi-test
  labels:
    app.kubernetes.io/name: mock-redis-6379
    app.kubernetes.io/component: cache
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mock-redis-6379
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mock-redis-6379
        app.kubernetes.io/component: cache
    spec:
      containers:
      - name: mock-server
        image: nginx:alpine
        ports:
        - containerPort: 6379
        command: ["/bin/sh"]
        args: 
        - -c
        - |
          echo 'server {
              listen 6379;
              location / {
                  return 200 "Mock Redis Service on port 6379 (HTTP)\n";
                  add_header Content-Type text/plain;
              }
          }' > /etc/nginx/conf.d/default.conf &&
          nginx -g "daemon off;"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mock-rabbitmq-5672
  namespace: notifi-test
  labels:
    app.kubernetes.io/name: mock-rabbitmq-5672
    app.kubernetes.io/component: queue
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mock-rabbitmq-5672
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mock-rabbitmq-5672
        app.kubernetes.io/component: queue
    spec:
      containers:
      - name: mock-server
        image: nginx:alpine
        ports:
        - containerPort: 5672
        command: ["/bin/sh"]
        args: 
        - -c
        - |
          echo 'server {
              listen 5672;
              location / {
                  return 200 "Mock RabbitMQ Service on port 5672 (HTTP)\n";
                  add_header Content-Type text/plain;
              }
          }' > /etc/nginx/conf.d/default.conf &&
          nginx -g "daemon off;"