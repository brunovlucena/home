apiVersion: v1
kind: ConfigMap
metadata:
  name: notifi-k6-simple-test
  namespace: notifi-test
  labels:
    app: notifi-k6-simple-test
    component: testing
    test-type: prometheus-metrics
data:
  k6-simple-tests.js: |
    import http from 'k6/http';
    import { check, sleep } from 'k6';
    import { Rate, Trend, Counter, Gauge } from 'k6/metrics';

    // Custom metrics for Prometheus
    export const customErrorRate = new Rate('custom_error_rate');
    export const customResponseTime = new Trend('custom_response_time');
    export const customRequestCounter = new Counter('custom_request_counter');
    export const customActiveUsers = new Gauge('custom_active_users');

    // Test configuration
    export const options = {
      stages: [
        { duration: '10s', target: 5 },   // Ramp up to 5 users
        { duration: '30s', target: 10 },  // Stay at 10 users
        { duration: '10s', target: 0 },   // Ramp down
      ],
      thresholds: {
        http_req_duration: ['p(95)<1000'], // 95% of requests must complete below 1s
        http_req_failed: ['rate<0.5'],    // Error rate must be below 50%
        custom_error_rate: ['rate<0.5'],
        custom_response_time: ['p(95)<2000'], // 95% of custom requests below 2s
      },
    };

    // Test targets - external services
    const externalUrls = [
      'https://httpbin.org/get',
      'https://httpbin.org/status/200',
      'https://httpbin.org/delay/1',
      'https://jsonplaceholder.typicode.com/posts/1',
    ];

    // Kubernetes service targets
    const k8sServices = [
      'http://mock-management-gateway:5000',
      'http://mock-user-manager:4000',
      'http://mock-mailer:5000',
    ];

    // Enhanced HTTP test function
    function performHttpTest(url, testName) {
      const startTime = Date.now();
      
      try {
        // Make HTTP request with timeout and retry logic
        const response = http.get(url, {
          timeout: '30s',
          tags: { test_name: testName, service: 'external' }
        });
        
        const duration = Date.now() - startTime;
        
        // Update custom metrics
        customResponseTime.add(duration);
        customRequestCounter.add(1);
        customActiveUsers.add(__VU);
        
        // Perform checks
        const checks = check(response, {
          [`${testName} - Status 200`]: (r) => r.status === 200,
          [`${testName} - Response time < 2s`]: (r) => r.timings.duration < 2000,
          [`${testName} - Response has body`]: (r) => r.body && r.body.length > 0,
        });
        
        customErrorRate.add(!checks);
        
        console.log(`${testName}: ${response.status} - ${duration}ms - Body length: ${response.body?.length || 0}`);
        
        return response;
        
      } catch (error) {
        console.log(`${testName}: Error - ${error.message}`);
        customErrorRate.add(true);
        customRequestCounter.add(1);
        return null;
      }
    }

    // Test Kubernetes services
    function testKubernetesServices() {
      console.log('Testing Kubernetes services...');
      
      k8sServices.forEach((url, index) => {
        const testName = `K8s-Service-${index + 1}`;
        const response = performHttpTest(url, testName);
        
        if (response && response.status === 200) {
          console.log(`‚úÖ ${testName} is healthy`);
        } else {
          console.log(`‚ùå ${testName} is not responding`);
        }
        
        sleep(0.1); // Small delay between service checks
      });
    }

    // Test external services
    function testExternalServices() {
      console.log('Testing external services...');
      
      externalUrls.forEach((url, index) => {
        const testName = `External-${index + 1}`;
        performHttpTest(url, testName);
        sleep(0.2); // Small delay between requests
      });
    }

    // Main test function
    export default function() {
      console.log(`Virtual User ${__VU} starting test iteration ${__ITER}`);
      
      // Update active users gauge
      customActiveUsers.add(__VU);
      
      // Test external services
      testExternalServices();
      
      // Test Kubernetes services
      testKubernetesServices();
      
      // Generate additional metrics
      customRequestCounter.add(Math.floor(Math.random() * 3) + 1);
      
      console.log(`Virtual User ${__VU} completed iteration ${__ITER}`);
    }

    // Setup function - runs once at the beginning
    export function setup() {
      console.log('üöÄ Setting up k6 Prometheus metrics test...');
      console.log(`Test will run with ${options.stages.reduce((max, stage) => Math.max(max, stage.target), 0)} max virtual users`);
      customActiveUsers.add(0);
      return { 
        startTime: new Date().toISOString(),
        testId: `test-${Date.now()}`
      };
    }

    // Teardown function - runs once at the end
    export function teardown(data) {
      console.log(`üèÅ Test completed at ${data.startTime}`);
      console.log(`Test ID: ${data.testId}`);
      customActiveUsers.add(0);
    }
