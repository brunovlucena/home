---
# Test Pod to validate Linkerd Server policies
apiVersion: v1
kind: Pod
metadata:
  name: test-linkerd-server-policies
  namespace: mocks
  labels:
    app.kubernetes.io/name: linkerd-server-test-test
    app.kubernetes.io/component: test
spec:
  containers:
  - name: linkerd-server-test
    image: alpine:3.18
    command: ["/bin/sh"]
    args:
    - -c
    - |
      apk add --no-cache curl
      echo "Testing Linkerd Server policies..."
      
      # Test Server policies by attempting connections
      echo "Testing Server policy enforcement..."
      
      # Test Gateway Server (port 80, HTTP/1)
      echo "Testing Gateway Server..."
      curl -f http://mock-management-gateway:5000/health || echo "Gateway Server test failed"
      curl -f http://mock-dataplane-gateway:80/health || echo "Dataplane Gateway Server test failed"
      
      # Test gRPC Server (port 4000, HTTP/2)
      echo "Testing gRPC Server..."
      curl -f http://mock-user-manager:4000/grpc || echo "gRPC Server test failed"
      curl -f http://mock-template-manager:4000/grpc || echo "gRPC Server test failed"
      
      # Test Messenger Server (port 5000, HTTP/1)
      echo "Testing Messenger Server..."
      curl -f http://mock-mailer:5000/health || echo "Messenger Server test failed"
      curl -f http://mock-sms-messenger:5000/health || echo "Messenger Server test failed"
      
      # Test Proxy Server (port 7000, HTTP/1)
      echo "Testing Proxy Server..."
      curl -f http://mock-evm-proxy:7000/health || echo "Proxy Server test failed"
      curl -f http://mock-solana-proxy:7000/health || echo "Proxy Server test failed"
      
      # Test Database Server (port 8123, HTTP/1)
      echo "Testing Database Server..."
      curl -f http://mock-clickhouse:8123/ping || echo "Database Server test failed"
      
      # Test Cache Server (port 6379, TCP)
      echo "Testing Cache Server..."
      curl -f http://mock-internal-cache:6379/ping || echo "Cache Server test failed"
      
      # Test Monitoring Server (port 5000, HTTP/1)
      echo "Testing Monitoring Server..."
      curl -f http://mock-monitor:5000/health || echo "Monitoring Server test failed"
      
      # Test Scheduler Server (port 4000, HTTP/2)
      echo "Testing Scheduler Server..."
      curl -f http://mock-scheduler:4000/grpc || echo "Scheduler Server test failed"
      
      # Test Processor Server (port 5000, HTTP/1)
      echo "Testing Processor Server..."
      curl -f http://mock-event-processor:5000/health || echo "Processor Server test failed"
      
      # Test Broker Server (port 4000, HTTP/2)
      echo "Testing Broker Server..."
      curl -f http://mock-rate-limit-broker:4000/grpc || echo "Broker Server test failed"
      
      # Test Handler Server (port 5000, HTTP/1)
      echo "Testing Handler Server..."
      curl -f http://mock-callback-handler:5000/health || echo "Handler Server test failed"
      
      # Test Service Server (port 5000, HTTP/1)
      echo "Testing Service Server..."
      curl -f http://mock-outpost-service:5000/health || echo "Service Server test failed"
      
      echo "Linkerd Server policy tests completed!"
  restartPolicy: Never

---
# Test Pod to validate ServerAuthorization policies
apiVersion: v1
kind: Pod
metadata:
  name: test-linkerd-auth-policies
  namespace: mocks
  labels:
    app.kubernetes.io/name: linkerd-auth-test-test
    app.kubernetes.io/component: test
spec:
  containers:
  - name: linkerd-auth-test
    image: alpine:3.18
    command: ["/bin/sh"]
    args:
    - -c
    - |
      apk add --no-cache curl
      echo "Testing Linkerd ServerAuthorization policies..."
      
      # Test mTLS authentication
      echo "Testing mTLS authentication..."
      
      # Test authenticated connections (should work)
      echo "Testing authenticated connections..."
      curl -f http://mock-management-gateway:5000/health || echo "Authenticated connection failed"
      curl -f http://mock-user-manager:4000/grpc || echo "Authenticated gRPC connection failed"
      curl -f http://mock-mailer:5000/health || echo "Authenticated messenger connection failed"
      curl -f http://mock-evm-proxy:7000/health || echo "Authenticated proxy connection failed"
      
      # Test cross-namespace access
      echo "Testing cross-namespace access..."
      curl -f http://mock-management-gateway:5000/api/v1/status || echo "Cross-namespace access failed"
      curl -f http://mock-user-manager:4000/grpc || echo "Cross-namespace gRPC access failed"
      
      # Test monitoring access
      echo "Testing monitoring access..."
      curl -f http://mock-monitor:5000/metrics || echo "Monitoring access failed"
      curl -f http://mock-management-gateway:7000/metrics || echo "Gateway metrics access failed"
      
      # Test network isolation
      echo "Testing network isolation..."
      # These should work within the allowed networks
      curl -f http://mock-management-gateway:5000/health || echo "Network isolation test failed"
      curl -f http://mock-user-manager:6000/health || echo "Network isolation test failed"
      
      echo "Linkerd ServerAuthorization policy tests completed!"
  restartPolicy: Never

---
# Test Pod to validate protocol-specific policies
apiVersion: v1
kind: Pod
metadata:
  name: test-linkerd-protocol-policies
  namespace: mocks
  labels:
    app.kubernetes.io/name: linkerd-protocol-test-test
    app.kubernetes.io/component: test
spec:
  containers:
  - name: linkerd-protocol-test
    image: alpine:3.18
    command: ["/bin/sh"]
    args:
    - -c
    - |
      apk add --no-cache curl
      echo "Testing Linkerd protocol-specific policies..."
      
      # Test HTTP/1 protocol
      echo "Testing HTTP/1 protocol..."
      curl -f http://mock-management-gateway:5000/health || echo "HTTP/1 test failed"
      curl -f http://mock-mailer:5000/health || echo "HTTP/1 messenger test failed"
      curl -f http://mock-evm-proxy:7000/health || echo "HTTP/1 proxy test failed"
      curl -f http://mock-monitor:5000/health || echo "HTTP/1 monitoring test failed"
      
      # Test HTTP/2 protocol (gRPC)
      echo "Testing HTTP/2 protocol (gRPC)..."
      curl -f http://mock-user-manager:4000/grpc || echo "HTTP/2 gRPC test failed"
      curl -f http://mock-template-manager:4000/grpc || echo "HTTP/2 gRPC test failed"
      curl -f http://mock-scheduler:4000/grpc || echo "HTTP/2 gRPC test failed"
      curl -f http://mock-rate-limit-broker:4000/grpc || echo "HTTP/2 gRPC test failed"
      
      # Test TCP protocol
      echo "Testing TCP protocol..."
      curl -f http://mock-internal-cache:6379/ping || echo "TCP cache test failed"
      
      # Test special ports
      echo "Testing special ports..."
      curl -f http://mock-dataplane-gateway:80/health || echo "Port 80 test failed"
      curl -f http://mock-clickhouse:8123/ping || echo "Port 8123 test failed"
      
      echo "Linkerd protocol-specific policy tests completed!"
  restartPolicy: Never

---
# Test Pod to validate service identity policies
apiVersion: v1
kind: Pod
metadata:
  name: test-linkerd-identity-policies
  namespace: mocks
  labels:
    app.kubernetes.io/name: linkerd-identity-test-test
    app.kubernetes.io/component: test
spec:
  containers:
  - name: linkerd-identity-test
    image: alpine:3.18
    command: ["/bin/sh"]
    args:
    - -c
    - |
      apk add --no-cache curl
      echo "Testing Linkerd service identity policies..."
      
      # Test service identity matching
      echo "Testing service identity matching..."
      
      # Test notifi-test namespace identity
      echo "Testing notifi-test namespace identity..."
      curl -f http://mock-management-gateway:5000/health || echo "notifi-test identity test failed"
      curl -f http://mock-user-manager:4000/grpc || echo "notifi-test identity test failed"
      curl -f http://mock-mailer:5000/health || echo "notifi-test identity test failed"
      curl -f http://mock-evm-proxy:7000/health || echo "notifi-test identity test failed"
      
      # Test cross-namespace identity (notifi namespace)
      echo "Testing cross-namespace identity..."
      curl -f http://mock-management-gateway:5000/api/v1/status || echo "Cross-namespace identity test failed"
      curl -f http://mock-user-manager:4000/grpc || echo "Cross-namespace identity test failed"
      
      # Test monitoring namespace identity
      echo "Testing monitoring namespace identity..."
      curl -f http://mock-monitor:5000/metrics || echo "Monitoring identity test failed"
      curl -f http://mock-management-gateway:7000/metrics || echo "Gateway metrics identity test failed"
      
      # Test unauthenticated access (where allowed)
      echo "Testing unauthenticated access..."
      curl -f http://mock-management-gateway:5000/health || echo "Unauthenticated access test failed"
      curl -f http://mock-mailer:5000/health || echo "Unauthenticated access test failed"
      curl -f http://mock-evm-proxy:7000/health || echo "Unauthenticated access test failed"
      
      echo "Linkerd service identity policy tests completed!"
  restartPolicy: Never

---
# Test Pod to validate network CIDR policies
apiVersion: v1
kind: Pod
metadata:
  name: test-linkerd-network-policies
  namespace: mocks
  labels:
    app.kubernetes.io/name: linkerd-network-test-test
    app.kubernetes.io/component: test
spec:
  containers:
  - name: linkerd-network-test
    image: alpine:3.18
    command: ["/bin/sh"]
    args:
    - -c
    - |
      apk add --no-cache curl
      echo "Testing Linkerd network CIDR policies..."
      
      # Test allowed network ranges
      echo "Testing allowed network ranges..."
      
      # Test 10.0.0.0/16 range (Pod network)
      echo "Testing 10.0.0.0/16 range (Pod network)..."
      curl -f http://mock-management-gateway:5000/health || echo "10.0.0.0/16 range test failed"
      curl -f http://mock-user-manager:4000/grpc || echo "10.0.0.0/16 range test failed"
      
      # Test 172.20.0.0/16 range (Service network)
      echo "Testing 172.20.0.0/16 range (Service network)..."
      curl -f http://mock-mailer:5000/health || echo "172.20.0.0/16 range test failed"
      curl -f http://mock-evm-proxy:7000/health || echo "172.20.0.0/16 range test failed"
      
      # Test internal cluster communication
      echo "Testing internal cluster communication..."
      curl -f http://mock-management-gateway:5000/api/v1/status || echo "Internal cluster communication test failed"
      curl -f http://mock-user-manager:4000/grpc || echo "Internal cluster communication test failed"
      curl -f http://mock-mailer:5000/send || echo "Internal cluster communication test failed"
      curl -f http://mock-evm-proxy:7000/rpc || echo "Internal cluster communication test failed"
      
      echo "Linkerd network CIDR policy tests completed!"
  restartPolicy: Never

---
# Test Job to validate policy enforcement
apiVersion: batch/v1
kind: Job
metadata:
  name: test-linkerd-policy-enforcement
  namespace: mocks
  labels:
    app.kubernetes.io/name: policy-enforcement-test-test
    app.kubernetes.io/component: test
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: policy-enforcement-test-test
        app.kubernetes.io/component: test
    spec:
      containers:
      - name: policy-enforcement-test
        image: alpine:3.18
        command: ["/bin/sh"]
        args:
        - -c
        - |
          apk add --no-cache curl
          echo "Testing Linkerd policy enforcement..."
          
          # Test that policies are properly enforced
          echo "Testing policy enforcement..."
          
          # Test Server policy enforcement
          echo "Testing Server policy enforcement..."
          curl -f http://mock-management-gateway:5000/health || echo "Server policy enforcement test failed"
          curl -f http://mock-user-manager:4000/grpc || echo "Server policy enforcement test failed"
          curl -f http://mock-mailer:5000/health || echo "Server policy enforcement test failed"
          curl -f http://mock-evm-proxy:7000/health || echo "Server policy enforcement test failed"
          
          # Test ServerAuthorization policy enforcement
          echo "Testing ServerAuthorization policy enforcement..."
          curl -f http://mock-management-gateway:5000/api/v1/status || echo "ServerAuthorization policy enforcement test failed"
          curl -f http://mock-user-manager:4000/grpc || echo "ServerAuthorization policy enforcement test failed"
          curl -f http://mock-monitor:5000/metrics || echo "ServerAuthorization policy enforcement test failed"
          
          # Test protocol enforcement
          echo "Testing protocol enforcement..."
          curl -f http://mock-management-gateway:5000/health || echo "Protocol enforcement test failed"
          curl -f http://mock-user-manager:4000/grpc || echo "Protocol enforcement test failed"
          curl -f http://mock-internal-cache:6379/ping || echo "Protocol enforcement test failed"
          
          # Test identity enforcement
          echo "Testing identity enforcement..."
          curl -f http://mock-management-gateway:5000/health || echo "Identity enforcement test failed"
          curl -f http://mock-user-manager:4000/grpc || echo "Identity enforcement test failed"
          curl -f http://mock-mailer:5000/health || echo "Identity enforcement test failed"
          
          # Test network enforcement
          echo "Testing network enforcement..."
          curl -f http://mock-management-gateway:5000/health || echo "Network enforcement test failed"
          curl -f http://mock-user-manager:4000/grpc || echo "Network enforcement test failed"
          curl -f http://mock-evm-proxy:7000/health || echo "Network enforcement test failed"
          
          echo "Linkerd policy enforcement tests completed!"
      restartPolicy: Never
  backoffLimit: 3