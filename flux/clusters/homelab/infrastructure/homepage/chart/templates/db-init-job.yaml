{{- if .Values.database.enabled }}
# =============================================================================
# üóÑÔ∏è DATABASE INITIALIZATION JOB
# =============================================================================
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "bruno-site.fullname" . }}-db-init-{{ now | date "20060102150405" }}
  labels:
    {{- include "bruno-site.labels" . | nindent 4 }}
    app.kubernetes.io/component: db-init
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "10"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  backoffLimit: 5
  template:
    metadata:
      labels:
        {{- include "bruno-site.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: db-init
    spec:
      restartPolicy: Never
      containers:
        - name: db-init
          image: postgres:16-alpine
          command:
            - /bin/sh
            - -c
            - |
              echo "üóÑÔ∏è Waiting for PostgreSQL to be ready..."
              until pg_isready -h {{ include "bruno-site.fullname" . }}-postgres -p {{ .Values.database.port }} -U {{ .Values.database.user }}; do
                echo "‚è≥ PostgreSQL is not ready yet. Waiting..."
                sleep 10
              done
              echo "‚úÖ PostgreSQL is ready. Running migrations..."
              
              # Check if database exists, create if not
              echo "üîç Checking if database exists..."
              psql -h {{ include "bruno-site.fullname" . }}-postgres -p {{ .Values.database.port }} -U {{ .Values.database.user }} -d postgres -c "SELECT 1 FROM pg_database WHERE datname='{{ .Values.database.name }}';" | grep -q 1 || psql -h {{ include "bruno-site.fullname" . }}-postgres -p {{ .Values.database.port }} -U {{ .Values.database.user }} -d postgres -c "CREATE DATABASE {{ .Values.database.name }};"
              
              # Run complete schema migration
              echo "üîÑ Running 001_complete_schema.sql..."
              psql -h {{ include "bruno-site.fullname" . }}-postgres -p {{ .Values.database.port }} -U {{ .Values.database.user }} -d {{ .Values.database.name }} -f /migrations/001_complete_schema.sql
              
              echo "‚úÖ Database initialization completed successfully!"
          env:
            - name: PGPASSWORD
              {{- if .Values.database.existingSecret }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.existingSecret }}
                  key: password
              {{- else if .Values.secrets.databasePassword }}
              value: {{ .Values.secrets.databasePassword | quote }}
              {{- else }}
              valueFrom:
                secretKeyRef:
                  name: {{ include "bruno-site.name" . }}-db-secret
                  key: password
              {{- end }}
          volumeMounts:
            - name: migrations
              mountPath: /migrations
      volumes:
        - name: migrations
          configMap:
            name: {{ include "bruno-site.fullname" . }}-migrations
{{- end }}
