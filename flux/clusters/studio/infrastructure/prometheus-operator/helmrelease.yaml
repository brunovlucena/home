---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: prometheus-operator
  namespace: prometheus
spec:
  interval: 5m
  chart:
    spec:
      chart: kube-prometheus-stack
      version: 77.10.0
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
        namespace: flux-system
  values:
    prometheus:
      prometheusSpec:
        retention: 7d
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: standard
              accessModes: ["ReadWriteOnce"]
              resources:
                requests:
                  storage: 10Gi
    grafana:
      adminPassword: adminbubs # TODO: Sealed Secrets
      initChownData:
        enabled: false
      persistence:
        enabled: true
        type: pvc
        storageClassName: standard
        size: 10Gi
        accessModes:
          - ReadWriteOnce
        annotations: {}
        finalizers:
          - kubernetes.io/pvc-protection
        mountPath: /var/lib/grafana
        subPath: ""
        existingClaim: ""
        readOnly: false
      service:
        type: ClusterIP
      ingress:
        enabled: false
        ingressClassName: istio # cloudflare and flagger
        hosts:
          - grafana.lucena.cloud
        path: /
        pathType: Prefix
      plugins:
        - grafana-strava-datasource
        - grafana-llm-app
      grafana.ini:
        unified_alerting:
          enabled: true
        provisioning:
          contactpoints: true
          notification_policies: true
      env:
        STRAVA_CLIENT_ID:
          valueFrom:
            secretKeyRef:
              name: strava-secrets
              key: client-id
        STRAVA_CLIENT_SECRET:
          valueFrom:
            secretKeyRef:
              name: strava-secrets
              key: client-secret
        STRAVA_ACCESS_TOKEN:
          valueFrom:
            secretKeyRef:
              name: strava-secrets
              key: access-token
        STRAVA_REFRESH_TOKEN:
          valueFrom:
            secretKeyRef:
              name: strava-secrets
              key: refresh-token
        STRAVA_EXPIRES_AT:
          valueFrom:
            secretKeyRef:
              name: strava-secrets
              key: expires-at
        GRAFANA_LLM_OLLAMA_URL:
          value: "http://192.168.0.3:11434"
        GRAFANA_LLM_OLLAMA_MODEL:
          value: "gemma3n:e4b"
        PAGERDUTY_SERVICE_KEY:
          valueFrom:
            secretKeyRef:
              name: pagerduty-secrets
              key: pagerduty-service-key
        SLACK_WEBHOOK_URL:
          valueFrom:
            secretKeyRef:
              name: pagerduty-secrets
              key: slack-webhook-url
      datasources:
        datasources.yaml:
          apiVersion: 1
          datasources:
            - name: Strava
              type: grafana-strava-datasource
              access: proxy
              url: https://www.strava.com
              isDefault: false
              editable: true
              jsonData:
                clientId: "${STRAVA_CLIENT_ID}"
                clientSecret: "${STRAVA_CLIENT_SECRET}"
                accessToken: "${STRAVA_ACCESS_TOKEN}"
                refreshToken: "${STRAVA_REFRESH_TOKEN}"
                expiresAt: "${STRAVA_EXPIRES_AT}"
            - name: Loki
              uid: loki
              type: loki
              access: proxy
              url: http://loki-read.loki:3100
              isDefault: false
              editable: true
              jsonData:
                maxLines: 1000
                timeout: 60
                httpHeaderName1: "X-Scope-OrgID"
              secureJsonData:
                httpHeaderValue1: "fake"
            - name: Tempo
              uid: tempo
              type: tempo
              access: proxy
              url: http://tempo-query-frontend.tempo:3100
              isDefault: false
              editable: true
              jsonData:
                tracesToLogs:
                  datasourceUid: 'loki'
                  tags: ['job', 'instance', 'pod', 'namespace']
                  mappedTags: [{ key: 'service.name', value: 'service' }]
                  mapTagNamesEnabled: false
                  spanStartTimeShift: '-1h'
                  spanEndTimeShift: '1h'
                  filterByTraceID: false
                  filterBySpanID: false
                tracesToMetrics:
                  datasourceUid: 'prometheus'
                  tags: [{ key: 'service.name', value: 'service' }, { key: 'job' }]
                  queries:
                    - name: 'Sample query'
                      query: 'sum(rate(traces_spanmetrics_latency_bucket{$$__tags}[5m]))'
                serviceMap:
                  datasourceUid: 'prometheus'
                search:
                  hide: false
                nodeGraph:
                  enabled: true
    alertmanager:
      enabled: true
      replicas: 1
      alertmanagerSpec:
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: standard
              accessModes: ["ReadWriteOnce"]
              resources:
                requests:
                  storage: 10Gi
        secrets:
          - "pagerduty-secrets"
        configSecret: "alertmanager-prometheus-operator-kube-p-alertmanager"
        containers:
        - name: alertmanager
          args:
          - --config.file=/etc/alertmanager/config_out/alertmanager.env.yaml
          - --storage.path=/alertmanager
          - --web.external-url=http://alertmanager-prometheus-operator-kube-p-alertmanager-0:9093
          - --web.route-prefix=/
          - --cluster.listen-address=0.0.0.0:9094
          - --cluster.advertise-address=$(POD_IP):9094
          - --log.level=debug
          - --log.format=json
          env:
          - name: PAGERDUTY_SERVICE_KEY
            valueFrom:
              secretKeyRef:
                name: pagerduty-secrets
                key: pagerduty-service-key
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                name: pagerduty-secrets
                key: slack-webhook-url
      alertmanagerConfigSelector:
        matchLabels:
          app: kube-prometheus-stack-alertmanager